[
    {
        "sample_order": 1,
        "function": "// Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    if (row < N && col < N) {\n        float value = 0.0f;\n        for (int k = 0; k < N; ++k) {\n            value += A[row * N + k] * B[k * N + col];\n        }\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}",
        "score": -3.3308096170425414
    },
    {
        "sample_order": 2,
        "function": "\n// Optimized matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / 16; ++tileIdx) {\n        int tiled_col = tileIdx * 16 + threadIdx.x;\n        int tiled_row = tileIdx * 16 + threadIdx.y;\n\n        if (row < N && tiled_col < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tiled_col];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (tiled_row < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[tiled_row * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5819456338882447
    },
    {
        "sample_order": 4,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_shared_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 16 - 1) / 16; ++m) {\n        if (row < N && m * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + m * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        if (m * 16 + threadIdx.y < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(m * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n        \n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n    \n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_shared_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel with shared memory optimization\");\n}\n",
        "score": -2.5808544158935547
    },
    {
        "sample_order": 11,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * 16 + threadIdx.y;\n    int col = blockIdx.x * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile = 0; tile < (N + 15) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N)\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        else\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (tile * 16 + threadIdx.y < N && col < N)\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        else\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.580460810661316
    },
    {
        "sample_order": 14,
        "function": "\n// Optimized Matrix Multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n    \n    for (int k = 0; k < N; k += 16) {\n        if (row < N && k + threadIdx.x < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && k + threadIdx.y < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n        \n        for (int n = 0; n < 16; ++n) {\n            value += As[threadIdx.y][n] * Bs[n][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.580390453338623
    },
    {
        "sample_order": 20,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void optimized_matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float Asub[16][16];\n    __shared__ float Bsub[16][16];\n\n    int blockRow = blockIdx.y;\n    int blockCol = blockIdx.x;\n    int row = blockRow * 16 + threadIdx.y;\n    int col = blockCol * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 16 - 1) / 16; ++m) {\n        if (row < N && m * 16 + threadIdx.x < N) {\n            Asub[threadIdx.y][threadIdx.x] = A[row * N + m * 16 + threadIdx.x];\n        } else {\n            Asub[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && m * 16 + threadIdx.y < N) {\n            Bsub[threadIdx.y][threadIdx.x] = B[(m * 16 + threadIdx.y) * N + col];\n        } else {\n            Bsub[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int e = 0; e < 16; ++e) {\n            value += Asub[threadIdx.y][e] * Bsub[e][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    optimized_matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized Matrix multiplication kernel\");\n}\n",
        "score": -2.579203224182129
    },
    {
        "sample_order": 26,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / 16; ++tileIdx) {\n        // Load tile of A and B into shared memory\n        shared_A[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        shared_B[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.572867226600647
    },
    {
        "sample_order": 27,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / 16; ++tileIdx) {\n        // Load tile of A and B into shared memory\n        shared_A[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        shared_B[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5722816228866576
    }
]