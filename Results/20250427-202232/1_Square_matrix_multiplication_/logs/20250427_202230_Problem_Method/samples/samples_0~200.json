[
    {
        "sample_order": 1,
        "function": "// Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    if (row < N && col < N) {\n        float value = 0.0f;\n        for (int k = 0; k < N; ++k) {\n            value += A[row * N + k] * B[k * N + col];\n        }\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}",
        "score": -3.3308096170425414
    },
    {
        "sample_order": 2,
        "function": "\n// Optimized matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / 16; ++tileIdx) {\n        int tiled_col = tileIdx * 16 + threadIdx.x;\n        int tiled_row = tileIdx * 16 + threadIdx.y;\n\n        if (row < N && tiled_col < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tiled_col];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (tiled_row < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[tiled_row * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5819456338882447
    },
    {
        "sample_order": 3,
        "function": "\n// Optimized matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / 16; ++tileIdx) {\n        int tiled_col = tileIdx * 16 + threadIdx.x;\n        int tiled_row = tileIdx * 16 + threadIdx.y;\n\n        if (row < N && tiled_col < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tiled_col];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (tiled_row < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[tiled_row * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.582086420059204
    },
    {
        "sample_order": 4,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_shared_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 16 - 1) / 16; ++m) {\n        if (row < N && m * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + m * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        if (m * 16 + threadIdx.y < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(m * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n        \n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n    \n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_shared_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel with shared memory optimization\");\n}\n",
        "score": -2.5808544158935547
    },
    {
        "sample_order": 5,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_shared_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 16 - 1) / 16; ++m) {\n        if (row < N && m * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + m * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        if (m * 16 + threadIdx.y < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(m * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n        \n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n    \n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_shared_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel with shared memory optimization\");\n}\n",
        "score": -2.583840036392212
    },
    {
        "sample_order": 6,
        "function": "\n// Optimized Matrix multiplication CUDA kernel with shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float A_shared[16][16];\n    __shared__ float B_shared[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + 15) / 16; ++tile_idx) {\n        if (row < N && tile_idx * 16 + threadIdx.x < N)\n            A_shared[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * 16 + threadIdx.x];\n        else\n            A_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && tile_idx * 16 + threadIdx.y < N)\n            B_shared[threadIdx.y][threadIdx.x] = B[(tile_idx * 16 + threadIdx.y) * N + col];\n        else\n            B_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += A_shared[threadIdx.y][k] * B_shared[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5826655864715575
    },
    {
        "sample_order": 7,
        "function": "\n// Optimized Matrix multiplication CUDA kernel with shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float A_shared[16][16];\n    __shared__ float B_shared[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + 15) / 16; ++tile_idx) {\n        if (row < N && tile_idx * 16 + threadIdx.x < N)\n            A_shared[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * 16 + threadIdx.x];\n        else\n            A_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && tile_idx * 16 + threadIdx.y < N)\n            B_shared[threadIdx.y][threadIdx.x] = B[(tile_idx * 16 + threadIdx.y) * N + col];\n        else\n            B_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += A_shared[threadIdx.y][k] * B_shared[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5836320161819457
    },
    {
        "sample_order": 8,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float tileA[16][16];\n    __shared__ float tileB[16][16];\n    \n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < (N + 15) / 16; ++k) {\n        if (row < N && k * 16 + threadIdx.x < N)\n            tileA[threadIdx.y][threadIdx.x] = A[row * N + k * 16 + threadIdx.x];\n        else\n            tileA[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && k * 16 + threadIdx.y < N)\n            tileB[threadIdx.y][threadIdx.x] = B[(k * 16 + threadIdx.y) * N + col];\n        else\n            tileB[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int n = 0; n < 16; ++n)\n            value += tileA[threadIdx.y][n] * tileB[n][threadIdx.x];\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N)\n        C[row * N + col] = value;\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5838719844818114
    },
    {
        "sample_order": 9,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float tileA[16][16];\n    __shared__ float tileB[16][16];\n    \n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < (N + 15) / 16; ++k) {\n        if (row < N && k * 16 + threadIdx.x < N)\n            tileA[threadIdx.y][threadIdx.x] = A[row * N + k * 16 + threadIdx.x];\n        else\n            tileA[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && k * 16 + threadIdx.y < N)\n            tileB[threadIdx.y][threadIdx.x] = B[(k * 16 + threadIdx.y) * N + col];\n        else\n            tileB[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int n = 0; n < 16; ++n)\n            value += tileA[threadIdx.y][n] * tileB[n][threadIdx.x];\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N)\n        C[row * N + col] = value;\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5852928161621094
    },
    {
        "sample_order": 10,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * 16 + threadIdx.y;\n    int col = blockIdx.x * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile = 0; tile < (N + 15) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N)\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        else\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (tile * 16 + threadIdx.y < N && col < N)\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        else\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.58405442237854
    },
    {
        "sample_order": 11,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * 16 + threadIdx.y;\n    int col = blockIdx.x * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile = 0; tile < (N + 15) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N)\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        else\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (tile * 16 + threadIdx.y < N && col < N)\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        else\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.580460810661316
    },
    {
        "sample_order": 12,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + 15) / 16; ++tile_idx) {\n        // Load a tile of A and B into shared memory\n        if (row < N && tile_idx * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && tile_idx * 16 + threadIdx.y < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile_idx * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        // Compute the partial product\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.583136034011841
    },
    {
        "sample_order": 13,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + 15) / 16; ++tile_idx) {\n        // Load a tile of A and B into shared memory\n        if (row < N && tile_idx * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && tile_idx * 16 + threadIdx.y < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile_idx * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        // Compute the partial product\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.581052827835083
    },
    {
        "sample_order": 14,
        "function": "\n// Optimized Matrix Multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n    \n    for (int k = 0; k < N; k += 16) {\n        if (row < N && k + threadIdx.x < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && k + threadIdx.y < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n        \n        for (int n = 0; n < 16; ++n) {\n            value += As[threadIdx.y][n] * Bs[n][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.580390453338623
    },
    {
        "sample_order": 15,
        "function": "\n// Optimized Matrix Multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n    \n    for (int k = 0; k < N; k += 16) {\n        if (row < N && k + threadIdx.x < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && k + threadIdx.y < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n        \n        for (int n = 0; n < 16; ++n) {\n            value += As[threadIdx.y][n] * Bs[n][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5858208179473876
    },
    {
        "sample_order": 16,
        "function": "\n// Matrix multiplication CUDA kernel optimized version\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < N; k += blockDim.x) {\n        As[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];\n        Bs[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * N + col];\n        __syncthreads();\n\n        for (int n = 0; n < blockDim.x; ++n) {\n            value += As[threadIdx.y][n] * Bs[n][threadIdx.x];\n        }\n        __syncthreads();\n    }\n    \n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.96804792881012
    },
    {
        "sample_order": 17,
        "function": "\n// Matrix multiplication CUDA kernel optimized version\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < N; k += blockDim.x) {\n        As[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];\n        Bs[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * N + col];\n        __syncthreads();\n\n        for (int n = 0; n < blockDim.x; ++n) {\n            value += As[threadIdx.y][n] * Bs[n][threadIdx.x];\n        }\n        __syncthreads();\n    }\n    \n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.9674847602844237
    },
    {
        "sample_order": 18,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < (N + 15) / 16; ++k) {\n        if (row < N && (k * 16 + threadIdx.x) < N)\n            As[threadIdx.y][threadIdx.x] = A[row * N + k * 16 + threadIdx.x];\n        else\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        \n        if (col < N && (k * 16 + threadIdx.y) < N)\n            Bs[threadIdx.y][threadIdx.x] = B[(k * 16 + threadIdx.y) * N + col];\n        else\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int n = 0; n < 16; ++n)\n            value += As[threadIdx.y][n] * Bs[n][threadIdx.x];\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N)\n        C[row * N + col] = value;\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.582409644126892
    },
    {
        "sample_order": 19,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < (N + 15) / 16; ++k) {\n        if (row < N && (k * 16 + threadIdx.x) < N)\n            As[threadIdx.y][threadIdx.x] = A[row * N + k * 16 + threadIdx.x];\n        else\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        \n        if (col < N && (k * 16 + threadIdx.y) < N)\n            Bs[threadIdx.y][threadIdx.x] = B[(k * 16 + threadIdx.y) * N + col];\n        else\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int n = 0; n < 16; ++n)\n            value += As[threadIdx.y][n] * Bs[n][threadIdx.x];\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N)\n        C[row * N + col] = value;\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5831071853637697
    },
    {
        "sample_order": 20,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void optimized_matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float Asub[16][16];\n    __shared__ float Bsub[16][16];\n\n    int blockRow = blockIdx.y;\n    int blockCol = blockIdx.x;\n    int row = blockRow * 16 + threadIdx.y;\n    int col = blockCol * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 16 - 1) / 16; ++m) {\n        if (row < N && m * 16 + threadIdx.x < N) {\n            Asub[threadIdx.y][threadIdx.x] = A[row * N + m * 16 + threadIdx.x];\n        } else {\n            Asub[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && m * 16 + threadIdx.y < N) {\n            Bsub[threadIdx.y][threadIdx.x] = B[(m * 16 + threadIdx.y) * N + col];\n        } else {\n            Bsub[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int e = 0; e < 16; ++e) {\n            value += Asub[threadIdx.y][e] * Bsub[e][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    optimized_matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized Matrix multiplication kernel\");\n}\n",
        "score": -2.579203224182129
    },
    {
        "sample_order": 21,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void optimized_matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float Asub[16][16];\n    __shared__ float Bsub[16][16];\n\n    int blockRow = blockIdx.y;\n    int blockCol = blockIdx.x;\n    int row = blockRow * 16 + threadIdx.y;\n    int col = blockCol * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 16 - 1) / 16; ++m) {\n        if (row < N && m * 16 + threadIdx.x < N) {\n            Asub[threadIdx.y][threadIdx.x] = A[row * N + m * 16 + threadIdx.x];\n        } else {\n            Asub[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && m * 16 + threadIdx.y < N) {\n            Bsub[threadIdx.y][threadIdx.x] = B[(m * 16 + threadIdx.y) * N + col];\n        } else {\n            Bsub[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int e = 0; e < 16; ++e) {\n            value += Asub[threadIdx.y][e] * Bsub[e][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    optimized_matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized Matrix multiplication kernel\");\n}\n",
        "score": -2.583347225189209
    },
    {
        "sample_order": 22,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < (N + 15) / 16; ++tileIdx) {\n        if (row < N && (tileIdx * 16 + threadIdx.x) < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        if ((tileIdx * 16 + threadIdx.y) < N && col < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5864736318588255
    },
    {
        "sample_order": 23,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < (N + 15) / 16; ++tileIdx) {\n        if (row < N && (tileIdx * 16 + threadIdx.x) < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        if ((tileIdx * 16 + threadIdx.y) < N && col < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.582896018028259
    },
    {
        "sample_order": 24,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_shared(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n    for (int tile = 0; tile < (N + 16 - 1) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (tile * 16 + threadIdx.y < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_shared<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized Matrix multiplication kernel using shared memory\");\n}\n",
        "score": -2.5829472064971926
    },
    {
        "sample_order": 25,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_shared(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n    for (int tile = 0; tile < (N + 16 - 1) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (tile * 16 + threadIdx.y < N && col < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_shared<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized Matrix multiplication kernel using shared memory\");\n}\n",
        "score": -2.581782412528992
    },
    {
        "sample_order": 26,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / 16; ++tileIdx) {\n        // Load tile of A and B into shared memory\n        shared_A[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        shared_B[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.572867226600647
    },
    {
        "sample_order": 27,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / 16; ++tileIdx) {\n        // Load tile of A and B into shared memory\n        shared_A[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        shared_B[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5722816228866576
    },
    {
        "sample_order": 28,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    \n    float value = 0.0f;\n    for (int tile = 0; tile < (N + 15) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && tile * 16 + threadIdx.y < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.581856036186218
    },
    {
        "sample_order": 29,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    \n    float value = 0.0f;\n    for (int tile = 0; tile < (N + 15) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && tile * 16 + threadIdx.y < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5832288026809693
    },
    {
        "sample_order": 30,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n#include <cuda_runtime.h>\n\n// Tile size for shared memory loading\n#define TILE_SIZE 16\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[TILE_SIZE][TILE_SIZE];\n    __shared__ float shared_B[TILE_SIZE][TILE_SIZE];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n  \n    for (int tile_idx = 0; tile_idx < (N + TILE_SIZE - 1) / TILE_SIZE; ++tile_idx) {\n        int A_idx = row * N + tile_idx * TILE_SIZE + threadIdx.x;\n        int B_idx = (tile_idx * TILE_SIZE + threadIdx.y) * N + col;\n\n        if (row < N && (tile_idx * TILE_SIZE + threadIdx.x) < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[A_idx];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && (tile_idx * TILE_SIZE + threadIdx.y) < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[B_idx];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < TILE_SIZE; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(TILE_SIZE, TILE_SIZE);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5814592123031614
    },
    {
        "sample_order": 31,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n#include <cuda_runtime.h>\n\n// Tile size for shared memory loading\n#define TILE_SIZE 16\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[TILE_SIZE][TILE_SIZE];\n    __shared__ float shared_B[TILE_SIZE][TILE_SIZE];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n  \n    for (int tile_idx = 0; tile_idx < (N + TILE_SIZE - 1) / TILE_SIZE; ++tile_idx) {\n        int A_idx = row * N + tile_idx * TILE_SIZE + threadIdx.x;\n        int B_idx = (tile_idx * TILE_SIZE + threadIdx.y) * N + col;\n\n        if (row < N && (tile_idx * TILE_SIZE + threadIdx.x) < N) {\n            shared_A[threadIdx.y][threadIdx.x] = A[A_idx];\n        } else {\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && (tile_idx * TILE_SIZE + threadIdx.y) < N) {\n            shared_B[threadIdx.y][threadIdx.x] = B[B_idx];\n        } else {\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < TILE_SIZE; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(TILE_SIZE, TILE_SIZE);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5823360443115235
    },
    {
        "sample_order": 32,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float A_shared[16][16];\n    __shared__ float B_shared[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + 15) / 16; ++tile_idx) {\n        if (row < N && (tile_idx * 16 + threadIdx.x) < N)\n            A_shared[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * 16 + threadIdx.x];\n        else\n            A_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && (tile_idx * 16 + threadIdx.y) < N)\n            B_shared[threadIdx.y][threadIdx.x] = B[(tile_idx * 16 + threadIdx.y) * N + col];\n        else\n            B_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += A_shared[threadIdx.y][k] * B_shared[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5818464517593385
    },
    {
        "sample_order": 33,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float A_shared[16][16];\n    __shared__ float B_shared[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + 15) / 16; ++tile_idx) {\n        if (row < N && (tile_idx * 16 + threadIdx.x) < N)\n            A_shared[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * 16 + threadIdx.x];\n        else\n            A_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && (tile_idx * 16 + threadIdx.y) < N)\n            B_shared[threadIdx.y][threadIdx.x] = B[(tile_idx * 16 + threadIdx.y) * N + col];\n        else\n            B_shared[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += A_shared[threadIdx.y][k] * B_shared[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5944607496261596
    },
    {
        "sample_order": 34,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    // Define shared memory for tiles of A and B\n    __shared__ float tileA[16][16];\n    __shared__ float tileB[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < N; k += blockDim.x) {\n        // Load tiles into shared memory\n        if (row < N && (k + threadIdx.x) < N)\n            tileA[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];\n        else\n            tileA[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if ((k + threadIdx.y) < N && col < N)\n            tileB[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * N + col];\n        else\n            tileB[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        // Compute value by iterating within the tile\n        for (int n = 0; n < blockDim.x; ++n) {\n            value += tileA[threadIdx.y][n] * tileB[n][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.991171193122864
    },
    {
        "sample_order": 35,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    // Define shared memory for tiles of A and B\n    __shared__ float tileA[16][16];\n    __shared__ float tileB[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int k = 0; k < N; k += blockDim.x) {\n        // Load tiles into shared memory\n        if (row < N && (k + threadIdx.x) < N)\n            tileA[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];\n        else\n            tileA[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if ((k + threadIdx.y) < N && col < N)\n            tileB[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * N + col];\n        else\n            tileB[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        // Compute value by iterating within the tile\n        for (int n = 0; n < blockDim.x; ++n) {\n            value += tileA[threadIdx.y][n] * tileB[n][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.998694396018982
    },
    {
        "sample_order": 36,
        "function": "\n// Optimized matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* __restrict__ A, const float* __restrict__ B, float* C, int N) {\n    // Shared memory tile size\n    __shared__ float tile_A[16][16];\n    __shared__ float tile_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n    for (int tileIdx = 0; tileIdx < (N + 15) / 16; ++tileIdx) {\n        // Load the tiles into shared memory\n        if (row < N && tileIdx * 16 + threadIdx.x < N)\n            tile_A[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        else\n            tile_A[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && tileIdx * 16 + threadIdx.y < N)\n            tile_B[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n        else\n            tile_B[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads(); // Synchronize to ensure tiles are loaded\n\n        // Compute partial products for current tile\n        for (int k = 0; k < 16; ++k) {\n            value += tile_A[threadIdx.y][k] * tile_B[k][threadIdx.x];\n        }\n\n        __syncthreads(); // Synchronize before loading new tiles\n    }\n\n    // Write result to global memory\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5819616317749023
    },
    {
        "sample_order": 37,
        "function": "\n// Optimized matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* __restrict__ A, const float* __restrict__ B, float* C, int N) {\n    // Shared memory tile size\n    __shared__ float tile_A[16][16];\n    __shared__ float tile_B[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    float value = 0.0f;\n    for (int tileIdx = 0; tileIdx < (N + 15) / 16; ++tileIdx) {\n        // Load the tiles into shared memory\n        if (row < N && tileIdx * 16 + threadIdx.x < N)\n            tile_A[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        else\n            tile_A[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if (col < N && tileIdx * 16 + threadIdx.y < N)\n            tile_B[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n        else\n            tile_B[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads(); // Synchronize to ensure tiles are loaded\n\n        // Compute partial products for current tile\n        for (int k = 0; k < 16; ++k) {\n            value += tile_A[threadIdx.y][k] * tile_B[k][threadIdx.x];\n        }\n\n        __syncthreads(); // Synchronize before loading new tiles\n    }\n\n    // Write result to global memory\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5826048135757445
    },
    {
        "sample_order": 38,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int blockIdx_k = 0; blockIdx_k < (N + 15) / 16; ++blockIdx_k) {\n        // Load a tile of A and B into shared memory\n        if (row < N && (blockIdx_k * 16 + threadIdx.x) < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + blockIdx_k * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && (blockIdx_k * 16 + threadIdx.y) < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(blockIdx_k * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n\n        // Compute the partial product for this tile\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n\n    // Store the result\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.583116817474365
    },
    {
        "sample_order": 39,
        "function": "\n// Optimized Matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int blockIdx_k = 0; blockIdx_k < (N + 15) / 16; ++blockIdx_k) {\n        // Load a tile of A and B into shared memory\n        if (row < N && (blockIdx_k * 16 + threadIdx.x) < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + blockIdx_k * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        if (col < N && (blockIdx_k * 16 + threadIdx.y) < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(blockIdx_k * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n\n        // Compute the partial product for this tile\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n        \n        __syncthreads();\n    }\n\n    // Store the result\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.583552026748657
    },
    {
        "sample_order": 40,
        "function": "\n// Optimized matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    // Shared memory tile size\n    const int TILE_SIZE = 16;\n    __shared__ float As[TILE_SIZE][TILE_SIZE];\n    __shared__ float Bs[TILE_SIZE][TILE_SIZE];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / TILE_SIZE; ++tileIdx) {\n        // Load data into shared memory\n        int tiledRow = row;\n        int tiledCol = tileIdx * TILE_SIZE + threadIdx.x;\n        if (tiledRow < N && tiledCol < N) {\n            As[threadIdx.y][threadIdx.x] = A[tiledRow * N + tiledCol];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        tiledRow = tileIdx * TILE_SIZE + threadIdx.y;\n        tiledCol = col;\n        if (tiledRow < N && tiledCol < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[tiledRow * N + tiledCol];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        // Synchronize to make sure the tile is loaded\n        __syncthreads();\n\n        // Accumulate results within the tile\n        for (int k = 0; k < TILE_SIZE; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n\n        // Synchronize before loading new tiles\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda_optimized(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda_optimized, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.5810144186019897
    },
    {
        "sample_order": 41,
        "function": "\n// Optimized matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    // Shared memory tile size\n    const int TILE_SIZE = 16;\n    __shared__ float As[TILE_SIZE][TILE_SIZE];\n    __shared__ float Bs[TILE_SIZE][TILE_SIZE];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tileIdx = 0; tileIdx < N / TILE_SIZE; ++tileIdx) {\n        // Load data into shared memory\n        int tiledRow = row;\n        int tiledCol = tileIdx * TILE_SIZE + threadIdx.x;\n        if (tiledRow < N && tiledCol < N) {\n            As[threadIdx.y][threadIdx.x] = A[tiledRow * N + tiledCol];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        tiledRow = tileIdx * TILE_SIZE + threadIdx.y;\n        tiledCol = col;\n        if (tiledRow < N && tiledCol < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[tiledRow * N + tiledCol];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        // Synchronize to make sure the tile is loaded\n        __syncthreads();\n\n        // Accumulate results within the tile\n        for (int k = 0; k < TILE_SIZE; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n\n        // Synchronize before loading new tiles\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda_optimized(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda_optimized, \"Optimized matrix multiplication kernel\");\n}\n",
        "score": -2.584768009185791
    },
    {
        "sample_order": 42,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int blockRow = blockIdx.y;\n    int blockCol = blockIdx.x;\n    int threadRow = threadIdx.y;\n    int threadCol = threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 15) / 16; ++m) {\n        if (blockRow * 16 + threadRow < N && m * 16 + threadCol < N) {\n            As[threadRow][threadCol] = A[(blockRow * 16 + threadRow) * N + m * 16 + threadCol];\n        } else {\n            As[threadRow][threadCol] = 0.0f;\n        }\n\n        if (m * 16 + threadRow < N && blockCol * 16 + threadCol < N) {\n            Bs[threadRow][threadCol] = B[(m * 16 + threadRow) * N + blockCol * 16 + threadCol];\n        } else {\n            Bs[threadRow][threadCol] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int e = 0; e < 16; ++e) {\n            value += As[threadRow][e] * Bs[e][threadCol];\n        }\n\n        __syncthreads();\n    }\n\n    if (blockRow * 16 + threadRow < N && blockCol * 16 + threadCol < N) {\n        C[(blockRow * 16 + threadRow) * N + blockCol * 16 + threadCol] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5825536012649537
    },
    {
        "sample_order": 43,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int blockRow = blockIdx.y;\n    int blockCol = blockIdx.x;\n    int threadRow = threadIdx.y;\n    int threadCol = threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int m = 0; m < (N + 15) / 16; ++m) {\n        if (blockRow * 16 + threadRow < N && m * 16 + threadCol < N) {\n            As[threadRow][threadCol] = A[(blockRow * 16 + threadRow) * N + m * 16 + threadCol];\n        } else {\n            As[threadRow][threadCol] = 0.0f;\n        }\n\n        if (m * 16 + threadRow < N && blockCol * 16 + threadCol < N) {\n            Bs[threadRow][threadCol] = B[(m * 16 + threadRow) * N + blockCol * 16 + threadCol];\n        } else {\n            Bs[threadRow][threadCol] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int e = 0; e < 16; ++e) {\n            value += As[threadRow][e] * Bs[e][threadCol];\n        }\n\n        __syncthreads();\n    }\n\n    if (blockRow * 16 + threadRow < N && blockCol * 16 + threadCol < N) {\n        C[(blockRow * 16 + threadRow) * N + blockCol * 16 + threadCol] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5823872089385986
    },
    {
        "sample_order": 44,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_shared(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n    \n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + blockDim.x - 1) / blockDim.x; ++tile_idx) {\n        if(tile_idx * blockDim.x + threadIdx.x < N && row < N)\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * blockDim.x + threadIdx.x];\n        else\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if(tile_idx * blockDim.y + threadIdx.y < N && col < N)\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile_idx * blockDim.y + threadIdx.y) * N + col];\n        else\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < blockDim.x; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n    \n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_shared<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.62007360458374
    },
    {
        "sample_order": 45,
        "function": "\n// Optimized matrix multiplication CUDA kernel using shared memory\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_shared(const float* A, const float* B, float* C, int N) {\n    __shared__ float shared_A[16][16];\n    __shared__ float shared_B[16][16];\n    \n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n\n    for (int tile_idx = 0; tile_idx < (N + blockDim.x - 1) / blockDim.x; ++tile_idx) {\n        if(tile_idx * blockDim.x + threadIdx.x < N && row < N)\n            shared_A[threadIdx.y][threadIdx.x] = A[row * N + tile_idx * blockDim.x + threadIdx.x];\n        else\n            shared_A[threadIdx.y][threadIdx.x] = 0.0f;\n\n        if(tile_idx * blockDim.y + threadIdx.y < N && col < N)\n            shared_B[threadIdx.y][threadIdx.x] = B[(tile_idx * blockDim.y + threadIdx.y) * N + col];\n        else\n            shared_B[threadIdx.y][threadIdx.x] = 0.0f;\n\n        __syncthreads();\n\n        for (int k = 0; k < blockDim.x; ++k) {\n            value += shared_A[threadIdx.y][k] * shared_B[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n    \n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_shared<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.620297574996948
    },
    {
        "sample_order": 46,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * 16 + threadIdx.y;\n    int col = blockIdx.x * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile = 0; tile < (N + 15) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        if (col < N && tile * 16 + threadIdx.y < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.581929588317871
    },
    {
        "sample_order": 47,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel_optimized(const float* A, const float* B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * 16 + threadIdx.y;\n    int col = blockIdx.x * 16 + threadIdx.x;\n\n    float value = 0.0f;\n\n    for (int tile = 0; tile < (N + 15) / 16; ++tile) {\n        if (row < N && tile * 16 + threadIdx.x < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + tile * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        if (col < N && tile * 16 + threadIdx.y < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(tile * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel_optimized<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.582822394371033
    },
    {
        "sample_order": 48,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* __restrict__ A, const float* __restrict__ B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n    \n    for (int tileIdx = 0; tileIdx < (N + 15) / 16; ++tileIdx) {\n        if (row < N && tileIdx * 16 + threadIdx.x < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        if (col < N && tileIdx * 16 + threadIdx.y < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.583651232719421
    },
    {
        "sample_order": 49,
        "function": "\n// Optimized Matrix multiplication CUDA kernel\n#include <torch/extension.h>\n\n__global__ void matmul_kernel(const float* __restrict__ A, const float* __restrict__ B, float* C, int N) {\n    __shared__ float As[16][16];\n    __shared__ float Bs[16][16];\n\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    float value = 0.0f;\n    \n    for (int tileIdx = 0; tileIdx < (N + 15) / 16; ++tileIdx) {\n        if (row < N && tileIdx * 16 + threadIdx.x < N) {\n            As[threadIdx.y][threadIdx.x] = A[row * N + tileIdx * 16 + threadIdx.x];\n        } else {\n            As[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        if (col < N && tileIdx * 16 + threadIdx.y < N) {\n            Bs[threadIdx.y][threadIdx.x] = B[(tileIdx * 16 + threadIdx.y) * N + col];\n        } else {\n            Bs[threadIdx.y][threadIdx.x] = 0.0f;\n        }\n        \n        __syncthreads();\n\n        for (int k = 0; k < 16; ++k) {\n            value += As[threadIdx.y][k] * Bs[k][threadIdx.x];\n        }\n        __syncthreads();\n    }\n\n    if (row < N && col < N) {\n        C[row * N + col] = value;\n    }\n}\n\ntorch::Tensor matmul_cuda(torch::Tensor A, torch::Tensor B) {\n    int N = A.size(0);\n    auto C = torch::zeros({N, N}, A.options());\n\n    const dim3 block(16, 16);\n    const dim3 grid((N + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matmul_kernel<<<grid, block>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), N);\n    cudaDeviceSynchronize();\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &matmul_cuda, \"Matrix multiplication kernel\");\n}\n",
        "score": -2.5845280647277833
    }
]