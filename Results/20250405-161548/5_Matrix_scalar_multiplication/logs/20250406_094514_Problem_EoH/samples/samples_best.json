[
    {
        "sample_order": 1,
        "algorithm": "{Optimize the CUDA kernel by using a 1D grid-stride loop for better memory access patterns and increased occupancy, while maintaining correct results.}",
        "function": "#include <torch/extension.h>\n\n__global__ void matrix_scalar_multiply_kernel(float *A, float s, float *C, int size) {\n    int idx = blockIdx.x * blockDim.x + threadIdx.x;\n    int stride = blockDim.x * gridDim.x;\n    \n    for (int i = idx; i < size; i += stride) {\n        C[i] = A[i] * s;\n    }\n}\n\ntorch::Tensor module_fn_cuda(torch::Tensor A, float s) {\n    int size = A.numel();\n    auto C = torch::zeros_like(A);\n    \n    int threads = 256;\n    int blocks = (size + threads - 1) / threads;\n    \n    matrix_scalar_multiply_kernel<<<blocks, threads>>>(A.data_ptr<float>(), s, C.data_ptr<float>(), size);\n    \n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &module_fn_cuda, \"Matrix-scalar multiplication kernel\");\n}",
        "score": -0.8560927927494049
    },
    {
        "sample_order": 3,
        "algorithm": "{Optimized the kernel by using 1D thread blocks and coalesced memory access for better memory bandwidth utilization.}",
        "function": "#include <torch/extension.h>\n\n__global__ void matrix_scalar_multiply_kernel(float *A, float s, float *C, int size) {\n    int idx = blockIdx.x * blockDim.x + threadIdx.x;\n    if (idx < size) {\n        C[idx] = A[idx] * s;\n    }\n}\n\ntorch::Tensor module_fn_cuda(torch::Tensor A, float s) {\n    auto M = A.size(0);\n    auto N = A.size(1);\n    auto size = M * N;\n\n    auto C = torch::zeros_like(A);\n\n    int block_size = 256;\n    int grid_size = (size + block_size - 1) / block_size;\n\n    matrix_scalar_multiply_kernel<<<grid_size, block_size>>>(A.data_ptr<float>(), s, C.data_ptr<float>(), size);\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &module_fn_cuda, \"Matrix-scalar multiplication kernel\");\n}",
        "score": -0.8559711992740631
    },
    {
        "sample_order": 4,
        "algorithm": "{Optimize by using 1D thread blocks for better memory access patterns and increased occupancy, while maintaining correctness through proper indexing.}",
        "function": "#include <torch/extension.h>\n\n__global__ void matrix_scalar_multiply_kernel(float *A, float s, float *C, int size) {\n    int idx = blockIdx.x * blockDim.x + threadIdx.x;\n    if (idx < size) {\n        C[idx] = A[idx] * s;\n    }\n}\n\ntorch::Tensor module_fn_cuda(torch::Tensor A, float s) {\n    auto M = A.size(0);\n    auto N = A.size(1);\n    auto size = M * N;\n\n    auto C = torch::zeros_like(A);\n\n    int block_size = 256;\n    int grid_size = (size + block_size - 1) / block_size;\n\n    matrix_scalar_multiply_kernel<<<grid_size, block_size>>>(A.data_ptr<float>(), s, C.data_ptr<float>(), size);\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &module_fn_cuda, \"Matrix-scalar multiplication kernel\");\n}",
        "score": -0.8557823956012726
    },
    {
        "sample_order": 25,
        "algorithm": "{Optimize the kernel by using a 2D grid layout with larger block size (32x8) and memory coalescing while maintaining correctness.}",
        "function": "#include <torch/extension.h>\n\n__global__ void matrix_scalar_multiply_kernel(float *A, float s, float *C, int M, int N) {\n    int row = blockIdx.x * blockDim.x + threadIdx.x;\n    int col = blockIdx.y * blockDim.y + threadIdx.y;\n    \n    if (row < M && col < N) {\n        int index = col * M + row;\n        C[index] = A[index] * s;\n    }\n}\n\ntorch::Tensor module_fn_cuda(torch::Tensor A, float s) {\n    auto M = A.size(0);\n    auto N = A.size(1);\n\n    auto C = torch::zeros_like(A);\n\n    dim3 block(32, 8);\n    dim3 grid((M + block.x - 1) / block.x, (N + block.y - 1) / block.y);\n\n    matrix_scalar_multiply_kernel<<<grid, block>>>(A.data_ptr<float>(), s, C.data_ptr<float>(), M, N);\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &module_fn_cuda, \"Matrix-scalar multiplication kernel\");\n}",
        "score": -0.8551359951496125
    }
]